# 📊 Product Performance SQL Analysis

This project performs a product-level performance analysis using transactional sales data. It computes key performance indicators (KPIs) for each product and segments them into performance tiers based on revenue and order metrics.

---

## 🔍 Objective

To analyze product performance using historical sales data and generate insights such as:
- Product recency and lifespan
- Average selling price
- Monthly and order-level revenue
- Customer engagement
- Product segmentation (High / Mid / Low Performer)

---

## 🗃️ Data Sources

The query uses two tables from a star schema:

- **`gold.fact_sales`**
  - `order_number`, `order_date`, `customer_key`, `product_key`, `sales_amount`, `quantity`

- **`gold.dim_products`**
  - `product_key`, `product_name`, `category`, `subcategory`, `cost`

---

## 📈 KPIs Generated

| KPI | Description |
|-----|-------------|
| `total_revenue` | Total revenue generated by a product |
| `total_quantity` | Total quantity sold |
| `total_orders` | Number of unique orders |
| `total_customers` | Number of unique customers |
| `avg_selling_price` | Average selling price per unit |
| `last_ordered` | Most recent date the product was ordered |
| `recency` | Months since the product was last ordered |
| `lifespan` | Months between first and last sale of the product |
| `avg_order_revenue` | Revenue per order |
| `avg_monthly_revenue` | Average monthly revenue over lifespan |
| `product_segment` | Segmentation based on total revenue: High, Mid, or Low Performer |

---

## 🧠 SQL Concepts Used

- **Common Table Expressions (CTEs)** – for modular queries
- **Aggregations** – `SUM`, `AVG`, `COUNT`, `MAX`, `DATEDIFF`
- **Conditional Logic** – `CASE` statements for segmentation
- **NULL Handling** – using `NULLIF()` to avoid division by zero
- **Data Joining** – `LEFT JOIN` between fact and dimension tables

---

## 💻 How to Use

1. Ensure the `gold.fact_sales` and `gold.dim_products` tables exist in your SQL environment.
2. Copy and run the SQL script in a supported SQL engine (e.g. Microsoft SQL Server).
3. Review the output to identify key product insights.
4. Export or visualize the results in Power BI, Tableau, or Excel.

---

## 🚀 Output Example

| product_name | category | total_revenue | recency | avg_selling_price | product_segment |
|--------------|----------|----------------|---------|-------------------|-----------------|
| Widget A     | Gadgets  | 74,500         | 2       | 59.3              | High Performer  |
| Gadget B     | Devices  | 6,200          | 8       | 41.7              | Mid Performer   |

---

## 📂 Files

- `product_performance_analysis.sql` – Main SQL script
- `README.md` – Project documentation
- `sample_output.csv` *(optional)* – Result preview (if available)

---

## 📌 Author Notes

This is a resume-ready, portfolio-quality project that demonstrates the ability to:
- Perform business-driven data analysis using SQL
- Create KPIs and segments relevant to sales/product analytics
- Translate data into actionable insights

---

### 🏷 Tags
`SQL` `Data Analysis` `Product KPIs` `Data Warehousing` `Portfolio Project`

